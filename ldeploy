#!/usr/bin/env python3

import sys
import subprocess
import os.path
import json
from shutil import copyfile

argv = sys.argv
a1 = str(argv[1])


# RSYNC
# # # # # # # # # # # #
def rsync(s, l, i):

    break_string = []
    break_string = ["rsync", "-avz", "--chown={}".format(s["chown"]), '-e "ssh -p {}"'.format(s["port"]), "{}".format(l)] + i + ["{}@{}:{}".format(s["user"], s["address"], s["deploy_dir"])]
    execute_string = " ".join(break_string)
    subprocess.call(execute_string, shell=True)


# HELP
# # # # # # # # # # # #
def help_function():
    help_text = """ LDeploy help
    remote {arg} - push data to server
    help - you get help
    init - create ldeploy json file"""
    print(help_text)


# REMOTE
# # # # # # # # # # # #
def remote():
    # if conf ex
    if os.path.isfile("ldeploy.json"):

        # Open json file
        with open('ldeploy.json') as ldeploy_file:
            conf_json = json.load(ldeploy_file)

        ignore = [];
        for item in conf_json["ignore"]:
            ignore.append("--exclude={}".format(item))

        if len(argv) == 3 :
            remote = conf_json["remote"][argv[2]]
            rsync(remote, conf_json["project_dir"], ignore)

        else:
            remote = conf_json["remote"]["standard"]
            rsync(remote, conf_json["project_dir"], ignore)

    else:
        print("Cannot find config file. Use: ldeploy init to create it")


# INIT
# # # # # # # # # # # #
def init():
    app_dir = os.path.dirname(os.path.realpath(__file__)) + "/ldeploy.source.json"
    cwd = os.getcwd() + "/ldeploy.json"
    copyfile(app_dir, cwd)
    print("LDeploy init complete")


# APP STARTER
# # # # # # # # # # # #
if a1 == "help":
    help_function()
elif a1 == "init":
    init()
elif a1 == "remote":
    remote()
